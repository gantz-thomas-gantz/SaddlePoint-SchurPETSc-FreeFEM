load "PETSc"
macro dimension()2

// -- Mesh and finite element spaces
mesh Th = square(10, 10);  
fespace Vh(Th, [P2, P2]); // velocity: vector-valued P2
fespace Qh(Th, P1);       // pressure: scalar P1

// -- Unknowns and test functions
Vh [u1, u2], [v1, v2];
Qh p, q;

// -- Variational forms
varf aStokes([u1, u2], [v1, v2]) = 
    int2d(Th)(
        dx(u1)*dx(v1) + dy(u1)*dy(v1)
      + dx(u2)*dx(v2) + dy(u2)*dy(v2)
    )
  + on(1, 3, u1 = 0, u2 = 0)              
  + on(4, u1 = y*(1.0 - y), u2 = 0);

// -- Variational form for divergence
varf bDiv([q], [u1, u2]) = int2d(Th)(-q*(dx(u1) + dy(u2)));

// -- Assemble system matrices
Mat A(Vh.ndof);
A = aStokes(Vh, Vh);
Mat B(Vh.ndof, Qh.ndof);
B = bDiv(Qh, Vh);

// -- Build block matrix
Mat M = [[A, B],
         [B', 0]];

set(M, sparams = 
  "-pc_type fieldsplit -pc_fieldsplit_type schur -pc_fieldsplit_schur_fact_type full -ksp_type fgmres " + 
  "-fieldsplit_0_pc_type icc -fieldsplit_0_pc_factor_shift_type none -fieldsplit_0_ksp_type cg " +
  "-pc_fieldsplit_schur_precondition selfp " +                                                                               
  "-fieldsplit_1_pc_type icc -fieldsplit_1_pc_factor_shift_type positive_definite -fieldsplit_1_ksp_type minres " +           
  "-ksp_view"
);

// -- Assemble RHS
real[int] rhs(Vh.ndof + Qh.ndof);
real[int] rhsV = aStokes(0, Vh);    // f = 0, only B.C.
rhs(0:rhsV.n - 1) = rhsV;           // div(u) = 0

// -- Solve with PETSc
real[int] sol(rhs.n);
KSPSolve(M, rhs, sol);

// -- Extract solution
Vh [u1sol, u2sol];
Qh psol;

real[int] VelocityPart(Vh.ndof); 
real[int] PressurePart(Qh.ndof);     

// Extract the velocity and pressure parts from the solution
VelocityPart = sol(0 : Vh.ndof - 1);   
PressurePart = sol(Vh.ndof : Vh.ndof + Qh.ndof - 1);  

// Separate u1, u2 and p from the solution vector
u1sol[] = VelocityPart;    
psol[] = PressurePart;  

// -- Plot
if (mpirank == 0) {
  plot(Th, [u1sol, u2sol], value=true, cmm = "Velocity", WindowIndex=0);
  plot(Th, psol, value=true, cmm = "Pressure", WindowIndex=1);
}

// -- Compute relative residual
real[int] residual(rhs.n);
MatMult(M, sol, residual);        // residual := M * sol
residual -= rhs;                  // residual := M*sol - rhs

real residualNorm = sqrt(residual' * residual);  // ||residual||
real rhsNorm = sqrt(rhs' * rhs);                 // ||rhs||
real relativeResidual = residualNorm / rhsNorm;

cout << "Relative residual: " << relativeResidual << endl;








